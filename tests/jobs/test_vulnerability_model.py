# -*- coding: utf-8 -*-

# Copyright (C) 2012-2014 Geoscience Australia

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=R0904
# Disable too many public methods for test cases

"""
Test the vulnerability module.
"""

import os
import tempfile
import unittest

import numpy
from scipy import asarray, allclose

from hazimp.jobs.vulnerability_model import vuln_sets_from_xml_file, \
    RealisedVulnerabilityCurves


def build_example1():
    """Build an example xml file.

    If you call this remember to delete the file;  os.remove(filename).

    Returns:
        The name of the file
    """
    str1 = """<?xml version='1.0' encoding='utf-8'?>
<nrml xmlns="http://openquake.org/xmlns/nrml/0.5"
      xmlns:gml="http://www.opengis.net/gml">

    <vulnerabilityModel id="PAGER" assetCategory="chickens" lossCategory="feathers">
        <vulnerabilityFunction id="IR" dist="LN">
            <imls imt="MMI">5.00 7.00 10.00</imls>
            <meanLRs>0.00  0.01  0.36</meanLRs>
            <covLRs>0.30 0.30 0.30 </covLRs>
        </vulnerabilityFunction>

        <vulnerabilityFunction id="PK" dist="LN">
            <imls imt="MMI">5.00 7.00 10.00</imls>
            <meanLRs>0.00 0.02  0.36</meanLRs>
            <covLRs>0.40 0.40 0.40 </covLRs>
        </vulnerabilityFunction>
    </vulnerabilityModel>

</nrml>"""

    # Write a file to test
    f = tempfile.NamedTemporaryFile(suffix='.xml',
                                    prefix='test_vuln_model',
                                    delete=False,
                                    mode='w+t')
    f.write(str1)
    f.close()
    return f.name

def build_example2():
    """Build an example xml file.

    If you call this remember to delete the file;  os.remove(filename).

    Returns:
        The name of the file
    """
    str1 = """<?xml version='1.0' encoding='utf-8'?>
<nrml xmlns="http://openquake.org/xmlns/nrml/0.5"
      xmlns:gml="http://www.opengis.net/gml">

    <vulnerabilityModel id="NPAGER" assetCategory="population" lossCategory="fatalities">
        <vulnerabilityFunction id="AA" dist="LN">
            <imls imt="MMI">6.00 8.00 11.00</imls>
            <meanLRs>0.00 0.03 0.36</meanLRs>
            <covLRs>0.50 0.50 0.50</covLRs>
        </vulnerabilityFunction>

        <vulnerabilityFunction id="BB" dist="LN">
            <imls imt="MMI">6.00 8.00 11.00</imls>
            <meanLRs>0.00 0.06 0.36</meanLRs>
            <covLRs>0.60 0.60 0.60</covLRs>
        </vulnerabilityFunction>
    </vulnerabilityModel>
</nrml>"""
    # Write a file to test
    f = tempfile.NamedTemporaryFile(suffix='.xml',
                                    prefix='test_vuln_model',
                                    delete=False,
                                    mode='w+t')
    f.write(str1)
    f.close()
    return f.name

class TestVulnerabilityFunction(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_from_xml(self):
        # TODO: This needs to be updated!
        filename = build_example1()
        vuln_sets = vuln_sets_from_xml_file(filename)
        os.remove(filename)
        filename = build_example2()
        vuln_sets.update(vuln_sets_from_xml_file(filename))
        os.remove(filename)

        self.assertTrue(allclose(vuln_sets["PAGER"].intensity_measure_level,
                                 asarray([5.00, 7.00, 10.00])))
        self.assertEqual(vuln_sets["PAGER"].intensity_measure_type, "MMI")
        self.assertEqual(vuln_sets["PAGER"].vulnerability_set_id, "PAGER")
        self.assertEqual(vuln_sets["PAGER"].asset_category, "chickens")
        self.assertEqual(vuln_sets["PAGER"].loss_category, "feathers")

        loss_rs = {"IR": asarray([0.0, 0.01, 0.36]),
                   "PK": asarray([0.0, 0.02, 0.36])}
        covs = {"IR": asarray([0.3, 0.3, 0.3]),
                "PK": asarray([0.4, 0.4, 0.4])}

        for key in loss_rs:
            vul_funct = vuln_sets["PAGER"].vulnerability_functions[key]
            self.assertTrue(allclose(vul_funct.mean_loss,
                                     loss_rs[key]))
            self.assertTrue(allclose(vul_funct.coefficient_of_variation,
                                     covs[key]))

        self.assertTrue(allclose(vuln_sets["NPAGER"].intensity_measure_level,
                                 asarray([6.00, 8.00, 11.00])))
        self.assertEqual(vuln_sets["NPAGER"].intensity_measure_type, "MMI")
        self.assertEqual(vuln_sets["NPAGER"].vulnerability_set_id, "NPAGER")
        self.assertEqual(vuln_sets["NPAGER"].asset_category, "population")
        self.assertEqual(vuln_sets["NPAGER"].loss_category, "fatalities")

        loss_rs = {"AA": asarray([0.0, 0.03, 0.36]),
                   "BB": asarray([0.0, 0.06, 0.36])}
        covs = {"AA": asarray([0.5, 0.5, 0.5]),
                "BB": asarray([0.6, 0.6, 0.6])}

        for key in loss_rs:
            vul_funct = vuln_sets["NPAGER"].vulnerability_functions[key]
            self.assertTrue(allclose(vul_funct.mean_loss,
                                     loss_rs[key]))
            self.assertTrue(allclose(vul_funct.coefficient_of_variation,
                                     covs[key]))

    def test_realised_vulnerability_curves(self):
        intensity_measure_type = 'MMI'
        loss_category_type = 'building_damage_index'
        intensity_measure_level = asarray([0.0, 0.5, 1.0])
        loss_per_asset = asarray([[0.0, 0.5, 1.0], [0.0, 0.05, 0.1]])
        vulnerability_set_id = 'NPAGER'
        default_loss = 10.0

        rvc1 = RealisedVulnerabilityCurves(intensity_measure_type,
                                           loss_category_type,
                                           intensity_measure_level,
                                           loss_per_asset,
                                           vulnerability_set_id,
                                           default_loss)
        intensities = asarray([0.5, 0.5])
        loss = rvc1.look_up(intensities)
        self.assertTrue(allclose(loss,
                                 asarray([0.5, 0.05])), 'actual: ' + str(loss))

        intensities = asarray([0.0, 0.0])
        loss = rvc1.look_up(intensities)
        self.assertTrue(allclose(loss,
                                 asarray([0.0, 0.0])), 'actual: ' + str(loss))

        intensities = asarray([1.0, 1.0])
        loss = rvc1.look_up(intensities)
        self.assertTrue(allclose(loss,
                                 asarray([1.0, 0.1])), 'actual: ' + str(loss))

    def test_realised_vulnerability_curves2(self):
        intensity_measure_type = 'MMI'
        loss_category_type = 'building_damage_index'
        intensity_measure_level = asarray([0.0, 0.4, 1.0])
        loss_per_asset = asarray([[0.0, 0.4, 1.0], [0.0, 0.04, 0.1]])
        vulnerability_set_id = 'NPAGER'
        default_loss = 10.0

        rvc1 = RealisedVulnerabilityCurves(intensity_measure_type,
                                           loss_category_type,
                                           intensity_measure_level,
                                           loss_per_asset,
                                           vulnerability_set_id,
                                           default_loss)

        intensities = asarray([[0.5, numpy.NAN], [0.1, numpy.NAN]])
        loss = rvc1.look_up(intensities)
        actual = asarray([[0.5, 10], [0.01, 10]])
        msg = 'got: ' + str(loss) + '\n actual: ' + str(actual)
        self.assertTrue(allclose(loss,
                                 actual), msg)

        intensities = asarray([0.5, numpy.NAN])
        loss = rvc1.look_up(intensities)
        self.assertTrue(allclose(loss,
                                 asarray([0.5, 10.0])), 'got ' + str(loss))


# -----------------------------------------------------------
if __name__ == "__main__":
    SUITE = unittest.makeSuite(TestVulnerabilityFunction, 'test')
    RUNNER = unittest.TextTestRunner()
    RUNNER.run(SUITE)
